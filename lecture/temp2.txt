#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <dirent.h>
#include <time.h>
#include <pwd.h>
#include <grp.h>
/*
  Function Declarations for builtin shell commands:
 */
int lsh_cd(char **args);
int lsh_help(char **args);
int lsh_exit(char **args);
int lsh_clear(char **args);
int lsh_extern(char **args);
int lsh_pwd(char **args);
int lsh_mkdir(char **args);
int lsh_ls(char **args);
int lsh_rmdir(char **args);

FILE *ftr;

char *builtin_str[] = {
  "cd",
  "help",
  "exit",
  "clear",
  "env",
  "pwd",
  "mkdir",
  "ls",
  "rmdir"
};

int (*builtin_func[]) (char **) = {
  &lsh_cd,
  &lsh_help,
  &lsh_exit,
  &lsh_clear,
  &lsh_extern,
  &lsh_pwd,
  &lsh_mkdir,
  &lsh_ls,
  &lsh_rmdir
};

int lsh_num_builtins() {
  return sizeof(builtin_str) / sizeof(char *);
}

/*
  Builtin function implementations.
*/

/**
   @brief Bultin command: change directory.
   @param args List of args.  args[0] is "cd".  args[1] is the directory.
   @return Always returns 1, to continue executing.
 */
int lsh_cd(char **args)
{
  if (args[1] == NULL) {
    fprintf(stderr, "lsh: expected argument to \"cd\"\n");
  } else {
    if (chdir(args[1]) != 0) {
      perror("shell");
    }
  }
  return 1;
}

int lsh_clear(char **args){
  system("clear");
  return 1;
}

int lsh_extern(char **args){
  extern char **environ;
  char **env;
  for(env=environ;*env;env++){
    printf("%s\n",*env);
  }
  return 1;
}

int lsh_mkdir(char **args){
  if(args[1]==NULL){
    fprintf(stderr,"shell: expected argument to \"mkdir\"\n");
  }
  else{
    if(mkdir(args[1],0775)==0){
      perror("shell");
    }
  }
  return 1;
}

int lsh_rmdir(char **args){
  if(args[1]==NULL){
    fprintf(stderr,"shell: expected argument to\"rmdir\"\n");
  }
  else{
    if(rmdir(args[1])){
      printf("shell");
    }
  }
  return 1;
}

int lsh_ls(char **args)
{
  //printf("%s...\n",args[1]);
  if(args[1]==NULL){
    DIR *dp;
    struct dirent *sd; 
    char path[1024];
    size_t ss;
    getcwd(path,sizeof(path));
    //printf("%s\n",path); 
    dp = opendir(path);
    while((sd=readdir(dp))!=NULL)
    {
      printf("%s\t\n",sd->d_name);
    }
    closedir(dp);
    return 1;
  }
  else if(args[1]!=NULL){
    struct stat fileStat;
    DIR *dp;
    struct dirent *sd; 
    char path[1024];
    size_t ss;
    getcwd(path,sizeof(path));
    dp = opendir(path);
    if(stat(path,&fileStat) < 0)    
      return 1;

    while((sd=readdir(dp))!=NULL){
    char temp1[1024];
    int i=0;
    int l2=strlen(path);
    for(i=0;i<=l2;i++){
      temp1[i]=path[i];
    }
    for(i=0;i<=strlen(sd->d_name);i++){
      temp1[i]=sd->d_name[i];
    }
    //printf("%s..%s\n",temp1,sd->d_name);
    if(stat(temp1,&fileStat) < 0)    
      return 1;
      struct passwd *pwuser;
      struct group *grpname;
      if(NULL==(pwuser=getpwuid(fileStat.st_uid))){
        perror("shell");
        exit(EXIT_FAILURE);
      }
      if(NULL==(grpname=getgrgid(fileStat.st_gid))){
        perror("shell");
        exit(EXIT_FAILURE);
      }
      printf( (S_ISDIR(fileStat.st_mode)) ? "d" : "-");
      printf( (fileStat.st_mode & S_IRUSR) ? "r" : "-");
      printf( (fileStat.st_mode & S_IWUSR) ? "w" : "-");
      printf( (fileStat.st_mode & S_IXUSR) ? "x" : "-");
      printf( (fileStat.st_mode & S_IRGRP) ? "r" : "-");
      printf( (fileStat.st_mode & S_IWGRP) ? "w" : "-");
      printf( (fileStat.st_mode & S_IXGRP) ? "x" : "-");
      printf( (fileStat.st_mode & S_IROTH) ? "r" : "-");
      printf( (fileStat.st_mode & S_IWOTH) ? "w" : "-");
      printf( (fileStat.st_mode & S_IXOTH) ? "x" : "-");
      printf("  %d",fileStat.st_nlink);
      printf("  %s",pwuser->pw_name);
      printf("  %s",grpname->gr_name);
      printf("  %ld",fileStat.st_size);
      printf("   %s",ctime(&fileStat.st_atim.tv_sec));
  }
    return 1;
  }
}

int lsh_help(char **args)
{
  int i;
  printf("Stephen Brennan's LSH\n");
  printf("Type program names and arguments, and hit enter.\n");
  printf("The following are built in:\n");

  for (i = 0; i < lsh_num_builtins(); i++) {
    printf("  %s\n", builtin_str[i]);
  }

  printf("Use the man command for information on other programs.\n");
  return 1;
}

int lsh_exit(char **args)
{
  return 0;
}

int lsh_pwd(char **args){
  char cwd[1024];
  if(getcwd(cwd,sizeof(cwd))!=NULL){
    fprintf(stderr,"%s\n",cwd);
  }
  else{
    perror("getcwd() error");
  }
  return 1;
}

int lsh_launch(char **args,int mode)
{
  pid_t pid, wpid;
  int status;
  pid = fork();
  if (pid == 0) {
    if(mode==1){
      setpgid(0,0);
    }
    if (execvp(args[0], args) == -1) {
      perror("shell");
    }
    exit(EXIT_FAILURE);
  } else if (pid < 0) {
    perror("shell");
  } else if(pid>0){
    if(mode==0){
    do {
        //if(mode==0){
        wpid = waitpid(pid, &status, WUNTRACED);
      } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
  }
  return 1;
}


int lsh_execute(char **args)
{
  int i;
  int mode1=0;

  if (args[0] == NULL) {
    return 1;
  }

  for (i = 0; i < lsh_num_builtins(); i++) {
    if (strcmp(args[0], builtin_str[i]) == 0) {
      return (*builtin_func[i])(args);
    }
  }
  if(args[0]==NULL){
    return lsh_launch(args,0);
  }
  else if(args[0]=='&'){
    return lsh_launch(args,1);
  }
}

#define LSH_RL_BUFSIZE 1024
char *lsh_read_line(void)
{
  int bufsize = LSH_RL_BUFSIZE;
  int position = 0;
  char *buffer = malloc(sizeof(char) * bufsize);
  int c;

  if (!buffer) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }

  while (1) {
    // Read a character
    c = getchar();

    // If we hit EOF, replace it with a null character and return.
    if (c == EOF || c == '\n') {
      buffer[position] = '\0';
      return buffer;
    } else {
      buffer[position] = c;
    }
    position++;

    // If we have exceeded the buffer, reallocate.
    if (position >= bufsize) {
      bufsize += LSH_RL_BUFSIZE;
      buffer = realloc(buffer, bufsize);
      if (!buffer) {
        fprintf(stderr, "lsh: allocation error\n");
        exit(EXIT_FAILURE);
      }
    }
  }
}

#define LSH_TOK_BUFSIZE 64
#define LSH_TOK_DELIM " \t\r\n\a"
/**
   @brief Split a line into tokens (very naively).
   @param line The line.
   @return Null-terminated array of tokens.
 */
char **lsh_split_line(char *line)
{
  int bufsize = LSH_TOK_BUFSIZE, position = 0;
  char **tokens = malloc(bufsize * sizeof(char*));
  char *token;

  if (!tokens) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }

  token = strtok(line, LSH_TOK_DELIM);
  while (token != NULL) {
    tokens[position] = token;
    position++;

    if (position >= bufsize) {
      bufsize += LSH_TOK_BUFSIZE;
      tokens = realloc(tokens, bufsize * sizeof(char*));
      if (!tokens) {
        fprintf(stderr, "lsh: allocation error\n");
        exit(EXIT_FAILURE);
      }
    }

    token = strtok(NULL, LSH_TOK_DELIM);
  }
  tokens[position] = NULL;
  return tokens;
}


void lsh_loop(void)
{
  char *line;
  char **args;
  int status;
  do {
    printf("> ");
    line = lsh_read_line();
    //printf("%s..\n",line);
    fprintf(ftr,"%s\n",line);
    args = lsh_split_line(line);
    status = lsh_execute(args);
    free(line);
    free(args);
  } while (status);
}

int main(int argc, char **argv)
{
  ftr=fopen("history.txt","a");
  if(ftr==NULL){
    printf("shell: PERMISSION DENIED\n");
    return 0;
  }
  //fclose(ftr);
  lsh_loop();
  return EXIT_SUCCESS;
}